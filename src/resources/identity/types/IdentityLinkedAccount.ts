/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { RivetIdentity } from "@fern-api/rivet-identity";
import * as core from "../../../core";

export type IdentityLinkedAccount =
  | RivetIdentity.IdentityLinkedAccount.Email
  | RivetIdentity.IdentityLinkedAccount._Unknown;

export declare namespace IdentityLinkedAccount {
  interface Email extends RivetIdentity.IdentityEmailLinkedAccount, _Utils {
    type: "email";
  }

  interface _Unknown extends _Utils {
    type: void;
  }

  interface _Utils {
    _visit: <_Result>(visitor: RivetIdentity.IdentityLinkedAccount._Visitor<_Result>) => _Result;
  }

  interface _Visitor<_Result> {
    email: (value: RivetIdentity.IdentityEmailLinkedAccount) => _Result;
    _other: (value: { type: string }) => _Result;
  }
}

export const IdentityLinkedAccount = {
  email: (value: RivetIdentity.IdentityEmailLinkedAccount): RivetIdentity.IdentityLinkedAccount.Email => {
    const valueWithoutVisit: Omit<RivetIdentity.IdentityLinkedAccount.Email, "_visit"> = {
      ...value,
      type: "email",
    };
    return core.addNonEnumerableProperty(valueWithoutVisit, "_visit", function <
      _Result
    >(this: RivetIdentity.IdentityLinkedAccount.Email, visitor: RivetIdentity.IdentityLinkedAccount._Visitor<_Result>) {
      return RivetIdentity.IdentityLinkedAccount._visit(this, visitor);
    });
  },

  _unknown: (value: { type: string }): RivetIdentity.IdentityLinkedAccount._Unknown => {
    const valueWithoutVisit = value as unknown as Omit<RivetIdentity.IdentityLinkedAccount._Unknown, "_visit">;
    return core.addNonEnumerableProperty(valueWithoutVisit, "_visit", function <
      _Result
    >(this: RivetIdentity.IdentityLinkedAccount._Unknown, visitor: RivetIdentity.IdentityLinkedAccount._Visitor<_Result>) {
      return RivetIdentity.IdentityLinkedAccount._visit(this, visitor);
    });
  },

  _visit: <_Result>(
    value: RivetIdentity.IdentityLinkedAccount,
    visitor: RivetIdentity.IdentityLinkedAccount._Visitor<_Result>
  ): _Result => {
    switch (value.type) {
      case "email":
        return visitor.email(value);
      default:
        return visitor._other(value as any);
    }
  },
} as const;
