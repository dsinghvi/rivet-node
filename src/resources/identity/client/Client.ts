/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../environments";
import * as core from "../../../core";
import { RivetIdentity } from "@fern-api/rivet-identity";
import urlJoin from "url-join";
import * as serializers from "../../../serialization";

export declare namespace Client {
  interface Options {
    environment?: environments.Environment | string;
    token?: core.Supplier<core.BearerToken>;
  }
}

export class Client {
  constructor(private readonly options: Client.Options) {}

  public async getIdentityProfile(
    identityId: RivetIdentity.IdentityId,
    request?: RivetIdentity.GetIdentityProfileRequest
  ): Promise<RivetIdentity.identity.getIdentityProfile.Response> {
    const _queryParams = new URLSearchParams();
    if (request?.watchIndex != null) {
      _queryParams.append("watch_index", request?.watchIndex);
    }

    const _response = await core.fetcher({
      url: urlJoin(
        this.options.environment ?? environments.Environment.Production,
        `/identities/${identityId}/profile`
      ),
      method: "POST",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
      queryParameters: _queryParams,
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.identity.getIdentityProfile.Response.parse(
          _response.body as serializers.identity.getIdentityProfile.Response.Raw
        ),
      };
    }

    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 400:
          return {
            ok: false,
            error: RivetIdentity.identity.getIdentityProfile.Error.badRequestError(
              await serializers.BadRequestError.parse(_response.error.body as serializers.BadRequestError.Raw)
            ),
          };
        case 403:
          return {
            ok: false,
            error: RivetIdentity.identity.getIdentityProfile.Error.forbiddenError(
              await serializers.ForbiddenError.parse(_response.error.body as serializers.ForbiddenError.Raw)
            ),
          };
        case 404:
          return {
            ok: false,
            error: RivetIdentity.identity.getIdentityProfile.Error.notFoundError(
              await serializers.NotFoundError.parse(_response.error.body as serializers.NotFoundError.Raw)
            ),
          };
        case 408:
          return {
            ok: false,
            error: RivetIdentity.identity.getIdentityProfile.Error.unauthorizedError(
              await serializers.UnauthorizedError.parse(_response.error.body as serializers.UnauthorizedError.Raw)
            ),
          };
        case 429:
          return {
            ok: false,
            error: RivetIdentity.identity.getIdentityProfile.Error.rateLimitError(
              await serializers.RateLimitError.parse(_response.error.body as serializers.RateLimitError.Raw)
            ),
          };
        case 500:
          return {
            ok: false,
            error: RivetIdentity.identity.getIdentityProfile.Error.internalError(
              await serializers.InternalError.parse(_response.error.body as serializers.InternalError.Raw)
            ),
          };
      }
    }

    return {
      ok: false,
      error: RivetIdentity.identity.getIdentityProfile.Error._unknown(_response.error),
    };
  }
}
