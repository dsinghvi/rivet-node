/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { RivetIdentity } from "@fern-api/rivet-identity";
import * as core from "../../../core";

export type Response = core.APIResponse<
  RivetIdentity.GetIdentityProfileOutput,
  RivetIdentity.identity.getIdentityProfile.Error
>;
export type Error =
  | RivetIdentity.identity.getIdentityProfile.Error.BadRequestError
  | RivetIdentity.identity.getIdentityProfile.Error.ForbiddenError
  | RivetIdentity.identity.getIdentityProfile.Error.NotFoundError
  | RivetIdentity.identity.getIdentityProfile.Error.UnauthorizedError
  | RivetIdentity.identity.getIdentityProfile.Error.RateLimitError
  | RivetIdentity.identity.getIdentityProfile.Error.InternalError
  | RivetIdentity.identity.getIdentityProfile.Error._Unknown;

export declare namespace Error {
  interface BadRequestError extends _Utils {
    statusCode: 400;
    content: RivetIdentity.BadRequestError;
  }

  interface ForbiddenError extends _Utils {
    statusCode: 403;
    content: RivetIdentity.ForbiddenError;
  }

  interface NotFoundError extends _Utils {
    statusCode: 404;
    content: RivetIdentity.NotFoundError;
  }

  interface UnauthorizedError extends _Utils {
    statusCode: 408;
    content: RivetIdentity.UnauthorizedError;
  }

  interface RateLimitError extends _Utils {
    statusCode: 429;
    content: RivetIdentity.RateLimitError;
  }

  interface InternalError extends _Utils {
    statusCode: 500;
    content: RivetIdentity.InternalError;
  }

  interface _Unknown extends _Utils {
    statusCode: void;
    content: core.Fetcher.Error;
  }

  interface _Utils {
    _visit: <_Result>(visitor: RivetIdentity.identity.getIdentityProfile.Error._Visitor<_Result>) => _Result;
  }

  interface _Visitor<_Result> {
    badRequestError: (value: RivetIdentity.BadRequestError) => _Result;
    forbiddenError: (value: RivetIdentity.ForbiddenError) => _Result;
    notFoundError: (value: RivetIdentity.NotFoundError) => _Result;
    unauthorizedError: (value: RivetIdentity.UnauthorizedError) => _Result;
    rateLimitError: (value: RivetIdentity.RateLimitError) => _Result;
    internalError: (value: RivetIdentity.InternalError) => _Result;
    _other: (value: core.Fetcher.Error) => _Result;
  }
}

export const Error = {
  badRequestError: (
    value: RivetIdentity.BadRequestError
  ): RivetIdentity.identity.getIdentityProfile.Error.BadRequestError => {
    const valueWithoutVisit: Omit<RivetIdentity.identity.getIdentityProfile.Error.BadRequestError, "_visit"> = {
      content: value,
      statusCode: 400,
    };
    return core.addNonEnumerableProperty(valueWithoutVisit, "_visit", function <
      _Result
    >(this: RivetIdentity.identity.getIdentityProfile.Error.BadRequestError, visitor: RivetIdentity.identity.getIdentityProfile.Error._Visitor<_Result>) {
      return RivetIdentity.identity.getIdentityProfile.Error._visit(this, visitor);
    });
  },

  forbiddenError: (
    value: RivetIdentity.ForbiddenError
  ): RivetIdentity.identity.getIdentityProfile.Error.ForbiddenError => {
    const valueWithoutVisit: Omit<RivetIdentity.identity.getIdentityProfile.Error.ForbiddenError, "_visit"> = {
      content: value,
      statusCode: 403,
    };
    return core.addNonEnumerableProperty(valueWithoutVisit, "_visit", function <
      _Result
    >(this: RivetIdentity.identity.getIdentityProfile.Error.ForbiddenError, visitor: RivetIdentity.identity.getIdentityProfile.Error._Visitor<_Result>) {
      return RivetIdentity.identity.getIdentityProfile.Error._visit(this, visitor);
    });
  },

  notFoundError: (
    value: RivetIdentity.NotFoundError
  ): RivetIdentity.identity.getIdentityProfile.Error.NotFoundError => {
    const valueWithoutVisit: Omit<RivetIdentity.identity.getIdentityProfile.Error.NotFoundError, "_visit"> = {
      content: value,
      statusCode: 404,
    };
    return core.addNonEnumerableProperty(valueWithoutVisit, "_visit", function <
      _Result
    >(this: RivetIdentity.identity.getIdentityProfile.Error.NotFoundError, visitor: RivetIdentity.identity.getIdentityProfile.Error._Visitor<_Result>) {
      return RivetIdentity.identity.getIdentityProfile.Error._visit(this, visitor);
    });
  },

  unauthorizedError: (
    value: RivetIdentity.UnauthorizedError
  ): RivetIdentity.identity.getIdentityProfile.Error.UnauthorizedError => {
    const valueWithoutVisit: Omit<RivetIdentity.identity.getIdentityProfile.Error.UnauthorizedError, "_visit"> = {
      content: value,
      statusCode: 408,
    };
    return core.addNonEnumerableProperty(valueWithoutVisit, "_visit", function <
      _Result
    >(this: RivetIdentity.identity.getIdentityProfile.Error.UnauthorizedError, visitor: RivetIdentity.identity.getIdentityProfile.Error._Visitor<_Result>) {
      return RivetIdentity.identity.getIdentityProfile.Error._visit(this, visitor);
    });
  },

  rateLimitError: (
    value: RivetIdentity.RateLimitError
  ): RivetIdentity.identity.getIdentityProfile.Error.RateLimitError => {
    const valueWithoutVisit: Omit<RivetIdentity.identity.getIdentityProfile.Error.RateLimitError, "_visit"> = {
      content: value,
      statusCode: 429,
    };
    return core.addNonEnumerableProperty(valueWithoutVisit, "_visit", function <
      _Result
    >(this: RivetIdentity.identity.getIdentityProfile.Error.RateLimitError, visitor: RivetIdentity.identity.getIdentityProfile.Error._Visitor<_Result>) {
      return RivetIdentity.identity.getIdentityProfile.Error._visit(this, visitor);
    });
  },

  internalError: (
    value: RivetIdentity.InternalError
  ): RivetIdentity.identity.getIdentityProfile.Error.InternalError => {
    const valueWithoutVisit: Omit<RivetIdentity.identity.getIdentityProfile.Error.InternalError, "_visit"> = {
      content: value,
      statusCode: 500,
    };
    return core.addNonEnumerableProperty(valueWithoutVisit, "_visit", function <
      _Result
    >(this: RivetIdentity.identity.getIdentityProfile.Error.InternalError, visitor: RivetIdentity.identity.getIdentityProfile.Error._Visitor<_Result>) {
      return RivetIdentity.identity.getIdentityProfile.Error._visit(this, visitor);
    });
  },

  _unknown: (fetcherError: core.Fetcher.Error): RivetIdentity.identity.getIdentityProfile.Error._Unknown => {
    const valueWithoutVisit = fetcherError as unknown as Omit<
      RivetIdentity.identity.getIdentityProfile.Error._Unknown,
      "_visit"
    >;
    return core.addNonEnumerableProperty(valueWithoutVisit, "_visit", function <
      _Result
    >(this: RivetIdentity.identity.getIdentityProfile.Error._Unknown, visitor: RivetIdentity.identity.getIdentityProfile.Error._Visitor<_Result>) {
      return RivetIdentity.identity.getIdentityProfile.Error._visit(this, visitor);
    });
  },

  _visit: <_Result>(
    value: RivetIdentity.identity.getIdentityProfile.Error,
    visitor: RivetIdentity.identity.getIdentityProfile.Error._Visitor<_Result>
  ): _Result => {
    switch (value.statusCode) {
      case 400:
        return visitor.badRequestError(value.content);
      case 403:
        return visitor.forbiddenError(value.content);
      case 404:
        return visitor.notFoundError(value.content);
      case 408:
        return visitor.unauthorizedError(value.content);
      case 429:
        return visitor.rateLimitError(value.content);
      case 500:
        return visitor.internalError(value.content);
      default:
        return visitor._other(value as any);
    }
  },
} as const;
