/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { RivetApi } from "@fern-api/rivet";

/**
 * Methods to verify a captcha
 */
export type CaptchaConfig = RivetApi.commons.CaptchaConfig.Hcaptcha | RivetApi.commons.CaptchaConfig._Unknown;

export declare namespace CaptchaConfig {
    interface Hcaptcha extends RivetApi.commons.CaptchaConfigHcaptcha, _Utils {
        type: "hcaptcha";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: RivetApi.commons.CaptchaConfig._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        hcaptcha: (value: RivetApi.commons.CaptchaConfigHcaptcha) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const CaptchaConfig = {
    hcaptcha: (value: RivetApi.commons.CaptchaConfigHcaptcha): RivetApi.commons.CaptchaConfig.Hcaptcha => {
        return {
            ...value,
            type: "hcaptcha",
            _visit: function <_Result>(
                this: RivetApi.commons.CaptchaConfig.Hcaptcha,
                visitor: RivetApi.commons.CaptchaConfig._Visitor<_Result>
            ) {
                return RivetApi.commons.CaptchaConfig._visit(this, visitor);
            },
        };
    },

    _unknown: (value: { type: string }): RivetApi.commons.CaptchaConfig._Unknown => {
        return {
            ...(value as any),
            _visit: function <_Result>(
                this: RivetApi.commons.CaptchaConfig._Unknown,
                visitor: RivetApi.commons.CaptchaConfig._Visitor<_Result>
            ) {
                return RivetApi.commons.CaptchaConfig._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: RivetApi.commons.CaptchaConfig,
        visitor: RivetApi.commons.CaptchaConfig._Visitor<_Result>
    ): _Result => {
        switch (value.type) {
            case "hcaptcha":
                return visitor.hcaptcha(value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
