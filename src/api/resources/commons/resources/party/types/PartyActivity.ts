/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { RivetApi } from "@fern-api/rivet";

/**
 * A union representing the activity of a given party.
 */
export type PartyActivity =
    /**
     * A party activity denoting that the party is idle. */
    | RivetApi.commons.PartyActivity.Idle
    | RivetApi.commons.PartyActivity.MatchmakerFindingLobby
    | RivetApi.commons.PartyActivity.MatchmakerLobby
    | RivetApi.commons.PartyActivity._Unknown;

export declare namespace PartyActivity {
    interface Idle extends _Utils {
        type: "idle";
    }

    interface MatchmakerFindingLobby extends RivetApi.commons.PartyActivityMatchmakerFindingLobby, _Utils {
        type: "matchmaker_finding_lobby";
    }

    interface MatchmakerLobby extends RivetApi.commons.PartyActivityMatchmakerLobby, _Utils {
        type: "matchmaker_lobby";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: RivetApi.commons.PartyActivity._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        idle: () => _Result;
        matchmakerFindingLobby: (value: RivetApi.commons.PartyActivityMatchmakerFindingLobby) => _Result;
        matchmakerLobby: (value: RivetApi.commons.PartyActivityMatchmakerLobby) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const PartyActivity = {
    idle: (): RivetApi.commons.PartyActivity.Idle => {
        return {
            type: "idle",
            _visit: function <_Result>(
                this: RivetApi.commons.PartyActivity.Idle,
                visitor: RivetApi.commons.PartyActivity._Visitor<_Result>
            ) {
                return RivetApi.commons.PartyActivity._visit(this, visitor);
            },
        };
    },

    matchmakerFindingLobby: (
        value: RivetApi.commons.PartyActivityMatchmakerFindingLobby
    ): RivetApi.commons.PartyActivity.MatchmakerFindingLobby => {
        return {
            ...value,
            type: "matchmaker_finding_lobby",
            _visit: function <_Result>(
                this: RivetApi.commons.PartyActivity.MatchmakerFindingLobby,
                visitor: RivetApi.commons.PartyActivity._Visitor<_Result>
            ) {
                return RivetApi.commons.PartyActivity._visit(this, visitor);
            },
        };
    },

    matchmakerLobby: (
        value: RivetApi.commons.PartyActivityMatchmakerLobby
    ): RivetApi.commons.PartyActivity.MatchmakerLobby => {
        return {
            ...value,
            type: "matchmaker_lobby",
            _visit: function <_Result>(
                this: RivetApi.commons.PartyActivity.MatchmakerLobby,
                visitor: RivetApi.commons.PartyActivity._Visitor<_Result>
            ) {
                return RivetApi.commons.PartyActivity._visit(this, visitor);
            },
        };
    },

    _unknown: (value: { type: string }): RivetApi.commons.PartyActivity._Unknown => {
        return {
            ...(value as any),
            _visit: function <_Result>(
                this: RivetApi.commons.PartyActivity._Unknown,
                visitor: RivetApi.commons.PartyActivity._Visitor<_Result>
            ) {
                return RivetApi.commons.PartyActivity._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: RivetApi.commons.PartyActivity,
        visitor: RivetApi.commons.PartyActivity._Visitor<_Result>
    ): _Result => {
        switch (value.type) {
            case "idle":
                return visitor.idle();
            case "matchmaker_finding_lobby":
                return visitor.matchmakerFindingLobby(value);
            case "matchmaker_lobby":
                return visitor.matchmakerLobby(value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
