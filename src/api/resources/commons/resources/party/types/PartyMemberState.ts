/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { RivetRivet } from "@fern-api/rivet";

export type PartyMemberState =
  /**
   * A party member state denoting that the member is idle. */
  | RivetRivet.commons.PartyMemberState.Idle
  /**
   * A party member state denoting that the member is currently waiting to start matchmaking. */
  | RivetRivet.commons.PartyMemberState.MatchmakerPending
  /**
   * A party member state denoting that the member is currently searching for a lobby. */
  | RivetRivet.commons.PartyMemberState.MatchmakerFindingLobby
  | RivetRivet.commons.PartyMemberState.MatchmakerLobby
  | RivetRivet.commons.PartyMemberState._Unknown;

export declare namespace PartyMemberState {
  interface Idle extends _Utils {
    type: "idle";
  }

  interface MatchmakerPending extends _Utils {
    type: "matchmaker_pending";
  }

  interface MatchmakerFindingLobby extends _Utils {
    type: "matchmaker_finding_lobby";
  }

  interface MatchmakerLobby extends RivetRivet.commons.PartyMemberStateMatchmakerLobby, _Utils {
    type: "matchmaker_lobby";
  }

  interface _Unknown extends _Utils {
    type: void;
  }

  interface _Utils {
    _visit: <_Result>(visitor: RivetRivet.commons.PartyMemberState._Visitor<_Result>) => _Result;
  }

  interface _Visitor<_Result> {
    idle: () => _Result;
    matchmakerPending: () => _Result;
    matchmakerFindingLobby: () => _Result;
    matchmakerLobby: (value: RivetRivet.commons.PartyMemberStateMatchmakerLobby) => _Result;
    _other: (value: { type: string }) => _Result;
  }
}

export const PartyMemberState = {
  idle: (): RivetRivet.commons.PartyMemberState.Idle => {
    return {
      type: "idle",
      _visit: function <_Result>(
        this: RivetRivet.commons.PartyMemberState.Idle,
        visitor: RivetRivet.commons.PartyMemberState._Visitor<_Result>
      ) {
        return RivetRivet.commons.PartyMemberState._visit(this, visitor);
      },
    };
  },

  matchmakerPending: (): RivetRivet.commons.PartyMemberState.MatchmakerPending => {
    return {
      type: "matchmaker_pending",
      _visit: function <_Result>(
        this: RivetRivet.commons.PartyMemberState.MatchmakerPending,
        visitor: RivetRivet.commons.PartyMemberState._Visitor<_Result>
      ) {
        return RivetRivet.commons.PartyMemberState._visit(this, visitor);
      },
    };
  },

  matchmakerFindingLobby: (): RivetRivet.commons.PartyMemberState.MatchmakerFindingLobby => {
    return {
      type: "matchmaker_finding_lobby",
      _visit: function <_Result>(
        this: RivetRivet.commons.PartyMemberState.MatchmakerFindingLobby,
        visitor: RivetRivet.commons.PartyMemberState._Visitor<_Result>
      ) {
        return RivetRivet.commons.PartyMemberState._visit(this, visitor);
      },
    };
  },

  matchmakerLobby: (
    value: RivetRivet.commons.PartyMemberStateMatchmakerLobby
  ): RivetRivet.commons.PartyMemberState.MatchmakerLobby => {
    return {
      ...value,
      type: "matchmaker_lobby",
      _visit: function <_Result>(
        this: RivetRivet.commons.PartyMemberState.MatchmakerLobby,
        visitor: RivetRivet.commons.PartyMemberState._Visitor<_Result>
      ) {
        return RivetRivet.commons.PartyMemberState._visit(this, visitor);
      },
    };
  },

  _unknown: (value: { type: string }): RivetRivet.commons.PartyMemberState._Unknown => {
    return {
      ...(value as any),
      _visit: function <_Result>(
        this: RivetRivet.commons.PartyMemberState._Unknown,
        visitor: RivetRivet.commons.PartyMemberState._Visitor<_Result>
      ) {
        return RivetRivet.commons.PartyMemberState._visit(this, visitor);
      },
    };
  },

  _visit: <_Result>(
    value: RivetRivet.commons.PartyMemberState,
    visitor: RivetRivet.commons.PartyMemberState._Visitor<_Result>
  ): _Result => {
    switch (value.type) {
      case "idle":
        return visitor.idle();
      case "matchmaker_pending":
        return visitor.matchmakerPending();
      case "matchmaker_finding_lobby":
        return visitor.matchmakerFindingLobby();
      case "matchmaker_lobby":
        return visitor.matchmakerLobby(value);
      default:
        return visitor._other(value as any);
    }
  },
} as const;
