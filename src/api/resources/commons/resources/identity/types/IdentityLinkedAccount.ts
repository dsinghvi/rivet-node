/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { RivetRivet } from "@fern-api/rivet";

/**
 * A union representing an identity's linked accounts.
 */
export type IdentityLinkedAccount =
  | RivetRivet.commons.IdentityLinkedAccount.Email
  | RivetRivet.commons.IdentityLinkedAccount._Unknown;

export declare namespace IdentityLinkedAccount {
  interface Email extends RivetRivet.commons.IdentityEmailLinkedAccount, _Utils {
    type: "email";
  }

  interface _Unknown extends _Utils {
    type: void;
  }

  interface _Utils {
    _visit: <_Result>(visitor: RivetRivet.commons.IdentityLinkedAccount._Visitor<_Result>) => _Result;
  }

  interface _Visitor<_Result> {
    email: (value: RivetRivet.commons.IdentityEmailLinkedAccount) => _Result;
    _other: (value: { type: string }) => _Result;
  }
}

export const IdentityLinkedAccount = {
  email: (value: RivetRivet.commons.IdentityEmailLinkedAccount): RivetRivet.commons.IdentityLinkedAccount.Email => {
    return {
      ...value,
      type: "email",
      _visit: function <_Result>(
        this: RivetRivet.commons.IdentityLinkedAccount.Email,
        visitor: RivetRivet.commons.IdentityLinkedAccount._Visitor<_Result>
      ) {
        return RivetRivet.commons.IdentityLinkedAccount._visit(this, visitor);
      },
    };
  },

  _unknown: (value: { type: string }): RivetRivet.commons.IdentityLinkedAccount._Unknown => {
    return {
      ...(value as any),
      _visit: function <_Result>(
        this: RivetRivet.commons.IdentityLinkedAccount._Unknown,
        visitor: RivetRivet.commons.IdentityLinkedAccount._Visitor<_Result>
      ) {
        return RivetRivet.commons.IdentityLinkedAccount._visit(this, visitor);
      },
    };
  },

  _visit: <_Result>(
    value: RivetRivet.commons.IdentityLinkedAccount,
    visitor: RivetRivet.commons.IdentityLinkedAccount._Visitor<_Result>
  ): _Result => {
    switch (value.type) {
      case "email":
        return visitor.email(value);
      default:
        return visitor._other(value as any);
    }
  },
} as const;
