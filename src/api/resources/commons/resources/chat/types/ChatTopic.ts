/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { RivetRivet } from "@fern-api/rivet";

/**
 * Represents the topic of the given chat thread.
 */
export type ChatTopic =
  | RivetRivet.commons.ChatTopic.Group
  | RivetRivet.commons.ChatTopic.Party
  | RivetRivet.commons.ChatTopic.Direct
  | RivetRivet.commons.ChatTopic._Unknown;

export declare namespace ChatTopic {
  interface Group extends RivetRivet.commons.ChatTopicGroup, _Utils {
    type: "group";
  }

  interface Party extends RivetRivet.commons.ChatTopicParty, _Utils {
    type: "party";
  }

  interface Direct extends RivetRivet.commons.ChatTopicDirect, _Utils {
    type: "direct";
  }

  interface _Unknown extends _Utils {
    type: void;
  }

  interface _Utils {
    _visit: <_Result>(visitor: RivetRivet.commons.ChatTopic._Visitor<_Result>) => _Result;
  }

  interface _Visitor<_Result> {
    group: (value: RivetRivet.commons.ChatTopicGroup) => _Result;
    party: (value: RivetRivet.commons.ChatTopicParty) => _Result;
    direct: (value: RivetRivet.commons.ChatTopicDirect) => _Result;
    _other: (value: { type: string }) => _Result;
  }
}

export const ChatTopic = {
  group: (value: RivetRivet.commons.ChatTopicGroup): RivetRivet.commons.ChatTopic.Group => {
    return {
      ...value,
      type: "group",
      _visit: function <_Result>(
        this: RivetRivet.commons.ChatTopic.Group,
        visitor: RivetRivet.commons.ChatTopic._Visitor<_Result>
      ) {
        return RivetRivet.commons.ChatTopic._visit(this, visitor);
      },
    };
  },

  party: (value: RivetRivet.commons.ChatTopicParty): RivetRivet.commons.ChatTopic.Party => {
    return {
      ...value,
      type: "party",
      _visit: function <_Result>(
        this: RivetRivet.commons.ChatTopic.Party,
        visitor: RivetRivet.commons.ChatTopic._Visitor<_Result>
      ) {
        return RivetRivet.commons.ChatTopic._visit(this, visitor);
      },
    };
  },

  direct: (value: RivetRivet.commons.ChatTopicDirect): RivetRivet.commons.ChatTopic.Direct => {
    return {
      ...value,
      type: "direct",
      _visit: function <_Result>(
        this: RivetRivet.commons.ChatTopic.Direct,
        visitor: RivetRivet.commons.ChatTopic._Visitor<_Result>
      ) {
        return RivetRivet.commons.ChatTopic._visit(this, visitor);
      },
    };
  },

  _unknown: (value: { type: string }): RivetRivet.commons.ChatTopic._Unknown => {
    return {
      ...(value as any),
      _visit: function <_Result>(
        this: RivetRivet.commons.ChatTopic._Unknown,
        visitor: RivetRivet.commons.ChatTopic._Visitor<_Result>
      ) {
        return RivetRivet.commons.ChatTopic._visit(this, visitor);
      },
    };
  },

  _visit: <_Result>(
    value: RivetRivet.commons.ChatTopic,
    visitor: RivetRivet.commons.ChatTopic._Visitor<_Result>
  ): _Result => {
    switch (value.type) {
      case "group":
        return visitor.group(value);
      case "party":
        return visitor.party(value);
      case "direct":
        return visitor.direct(value);
      default:
        return visitor._other(value as any);
    }
  },
} as const;
