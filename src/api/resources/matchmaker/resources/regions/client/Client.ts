/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import { RivetApi } from "@fern-api/rivet";
import urlJoin from "url-join";
import * as serializers from "../../../../../../serialization";
import * as errors from "../../../../../../errors";

export declare namespace Client {
    interface Options {
        environment?: environments.RivetApiEnvironment | environments.RivetApiEnvironmentUrls;
        token?: core.Supplier<core.BearerToken>;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * Returns a list of regions available to this namespace.
     *
     * Regions are sorted by most optimal to least optimal. The player's IP address
     * is used to calculate the regions' optimality.
     *
     */
    public async list(): Promise<RivetApi.matchmaker.ListRegionsOutput> {
        const _response = await core.fetcher({
            url: urlJoin(
                (this.options.environment ?? environments.RivetApiEnvironment.Production).Matchmaking,
                "/regions"
            ),
            method: "GET",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.matchmaker.regions.list.Response.parse(
                _response.body as serializers.matchmaker.regions.list.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.RivetApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RivetApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RivetApiTimeoutError();
            case "unknown":
                throw new errors.RivetApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
