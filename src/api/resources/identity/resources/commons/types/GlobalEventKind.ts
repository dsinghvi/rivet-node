/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { RivetRivet } from "@fern-api/rivet";

export type GlobalEventKind =
  | RivetRivet.identity.GlobalEventKind.ChatMessage
  | RivetRivet.identity.GlobalEventKind.ChatRead
  | RivetRivet.identity.GlobalEventKind.PartyUpdate
  | RivetRivet.identity.GlobalEventKind.IdentityUpdate
  | RivetRivet.identity.GlobalEventKind.MatchmakerLobbyJoin
  | RivetRivet.identity.GlobalEventKind.ChatThreadRemove
  | RivetRivet.identity.GlobalEventKind._Unknown;

export declare namespace GlobalEventKind {
  interface ChatMessage extends RivetRivet.identity.GlobalEventChatMessage, _Utils {
    type: "chat_message";
  }

  interface ChatRead extends RivetRivet.identity.GlobalEventChatRead, _Utils {
    type: "chat_read";
  }

  interface PartyUpdate extends RivetRivet.identity.GlobalEventPartyUpdate, _Utils {
    type: "party_update";
  }

  interface IdentityUpdate extends RivetRivet.identity.GlobalEventIdentityUpdate, _Utils {
    type: "identity_update";
  }

  interface MatchmakerLobbyJoin extends RivetRivet.identity.GlobalEventMatchmakerLobbyJoin, _Utils {
    type: "matchmaker_lobby_join";
  }

  interface ChatThreadRemove extends RivetRivet.identity.GlobalEventChatThreadRemove, _Utils {
    type: "chat_thread_remove";
  }

  interface _Unknown extends _Utils {
    type: void;
  }

  interface _Utils {
    _visit: <_Result>(visitor: RivetRivet.identity.GlobalEventKind._Visitor<_Result>) => _Result;
  }

  interface _Visitor<_Result> {
    chatMessage: (value: RivetRivet.identity.GlobalEventChatMessage) => _Result;
    chatRead: (value: RivetRivet.identity.GlobalEventChatRead) => _Result;
    partyUpdate: (value: RivetRivet.identity.GlobalEventPartyUpdate) => _Result;
    identityUpdate: (value: RivetRivet.identity.GlobalEventIdentityUpdate) => _Result;
    matchmakerLobbyJoin: (value: RivetRivet.identity.GlobalEventMatchmakerLobbyJoin) => _Result;
    chatThreadRemove: (value: RivetRivet.identity.GlobalEventChatThreadRemove) => _Result;
    _other: (value: { type: string }) => _Result;
  }
}

export const GlobalEventKind = {
  chatMessage: (value: RivetRivet.identity.GlobalEventChatMessage): RivetRivet.identity.GlobalEventKind.ChatMessage => {
    return {
      ...value,
      type: "chat_message",
      _visit: function <_Result>(
        this: RivetRivet.identity.GlobalEventKind.ChatMessage,
        visitor: RivetRivet.identity.GlobalEventKind._Visitor<_Result>
      ) {
        return RivetRivet.identity.GlobalEventKind._visit(this, visitor);
      },
    };
  },

  chatRead: (value: RivetRivet.identity.GlobalEventChatRead): RivetRivet.identity.GlobalEventKind.ChatRead => {
    return {
      ...value,
      type: "chat_read",
      _visit: function <_Result>(
        this: RivetRivet.identity.GlobalEventKind.ChatRead,
        visitor: RivetRivet.identity.GlobalEventKind._Visitor<_Result>
      ) {
        return RivetRivet.identity.GlobalEventKind._visit(this, visitor);
      },
    };
  },

  partyUpdate: (value: RivetRivet.identity.GlobalEventPartyUpdate): RivetRivet.identity.GlobalEventKind.PartyUpdate => {
    return {
      ...value,
      type: "party_update",
      _visit: function <_Result>(
        this: RivetRivet.identity.GlobalEventKind.PartyUpdate,
        visitor: RivetRivet.identity.GlobalEventKind._Visitor<_Result>
      ) {
        return RivetRivet.identity.GlobalEventKind._visit(this, visitor);
      },
    };
  },

  identityUpdate: (
    value: RivetRivet.identity.GlobalEventIdentityUpdate
  ): RivetRivet.identity.GlobalEventKind.IdentityUpdate => {
    return {
      ...value,
      type: "identity_update",
      _visit: function <_Result>(
        this: RivetRivet.identity.GlobalEventKind.IdentityUpdate,
        visitor: RivetRivet.identity.GlobalEventKind._Visitor<_Result>
      ) {
        return RivetRivet.identity.GlobalEventKind._visit(this, visitor);
      },
    };
  },

  matchmakerLobbyJoin: (
    value: RivetRivet.identity.GlobalEventMatchmakerLobbyJoin
  ): RivetRivet.identity.GlobalEventKind.MatchmakerLobbyJoin => {
    return {
      ...value,
      type: "matchmaker_lobby_join",
      _visit: function <_Result>(
        this: RivetRivet.identity.GlobalEventKind.MatchmakerLobbyJoin,
        visitor: RivetRivet.identity.GlobalEventKind._Visitor<_Result>
      ) {
        return RivetRivet.identity.GlobalEventKind._visit(this, visitor);
      },
    };
  },

  chatThreadRemove: (
    value: RivetRivet.identity.GlobalEventChatThreadRemove
  ): RivetRivet.identity.GlobalEventKind.ChatThreadRemove => {
    return {
      ...value,
      type: "chat_thread_remove",
      _visit: function <_Result>(
        this: RivetRivet.identity.GlobalEventKind.ChatThreadRemove,
        visitor: RivetRivet.identity.GlobalEventKind._Visitor<_Result>
      ) {
        return RivetRivet.identity.GlobalEventKind._visit(this, visitor);
      },
    };
  },

  _unknown: (value: { type: string }): RivetRivet.identity.GlobalEventKind._Unknown => {
    return {
      ...(value as any),
      _visit: function <_Result>(
        this: RivetRivet.identity.GlobalEventKind._Unknown,
        visitor: RivetRivet.identity.GlobalEventKind._Visitor<_Result>
      ) {
        return RivetRivet.identity.GlobalEventKind._visit(this, visitor);
      },
    };
  },

  _visit: <_Result>(
    value: RivetRivet.identity.GlobalEventKind,
    visitor: RivetRivet.identity.GlobalEventKind._Visitor<_Result>
  ): _Result => {
    switch (value.type) {
      case "chat_message":
        return visitor.chatMessage(value);
      case "chat_read":
        return visitor.chatRead(value);
      case "party_update":
        return visitor.partyUpdate(value);
      case "identity_update":
        return visitor.identityUpdate(value);
      case "matchmaker_lobby_join":
        return visitor.matchmakerLobbyJoin(value);
      case "chat_thread_remove":
        return visitor.chatThreadRemove(value);
      default:
        return visitor._other(value as any);
    }
  },
} as const;
