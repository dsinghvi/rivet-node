/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import { RivetRivet } from "@fern-api/rivet";
import urlJoin from "url-join";
import * as serializers from "../../../../../../serialization";

export declare namespace Client {
  interface Options {
    environment?: environments.RivetRivetEnvironment | string;
    token?: core.Supplier<core.BearerToken>;
  }
}

export class Client {
  constructor(private readonly options: Client.Options) {}

  public async prepare(): Promise<RivetRivet.identity.links.prepare.Response> {
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.RivetRivetEnvironment.Production, "/game-links"),
      method: "POST",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.identity.links.prepare.Response.parse(
          _response.body as serializers.identity.links.prepare.Response.Raw
        ),
      };
    }

    return {
      ok: false,
      error: RivetRivet.identity.links.prepare.Error._unknown(_response.error),
    };
  }

  public async get(request: RivetRivet.identity.GetGameLinkInput): Promise<RivetRivet.identity.links.get.Response> {
    const _queryParams = new URLSearchParams();
    _queryParams.append("identity_link_token", request.identityLinkToken);
    _queryParams.append("watch_index", request.watchIndex);
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.RivetRivetEnvironment.Production, "/game-links"),
      method: "GET",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
      queryParameters: _queryParams,
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.identity.links.get.Response.parse(
          _response.body as serializers.identity.links.get.Response.Raw
        ),
      };
    }

    return {
      ok: false,
      error: RivetRivet.identity.links.get.Error._unknown(_response.error),
    };
  }

  public async complete(
    request: RivetRivet.identity.CompleteGameLinkInput
  ): Promise<RivetRivet.identity.links.complete.Response> {
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.RivetRivetEnvironment.Production, "/game-links/complete"),
      method: "POST",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
      body: await serializers.identity.links.complete.Request.json({
        identityLinkToken: request.identityLinkToken,
      }),
    });
    if (_response.ok) {
      return {
        ok: true,
        body: undefined,
      };
    }

    return {
      ok: false,
      error: RivetRivet.identity.links.complete.Error._unknown(_response.error),
    };
  }

  public async cancel(
    request: RivetRivet.identity.CancelGameLinkInput
  ): Promise<RivetRivet.identity.links.cancel.Response> {
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.RivetRivetEnvironment.Production, "/game-links"),
      method: "POST",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
      body: await serializers.identity.links.cancel.Request.json({
        identityLinkToken: request.identityLinkToken,
      }),
    });
    if (_response.ok) {
      return {
        ok: true,
        body: undefined,
      };
    }

    return {
      ok: false,
      error: RivetRivet.identity.links.cancel.Error._unknown(_response.error),
    };
  }
}
