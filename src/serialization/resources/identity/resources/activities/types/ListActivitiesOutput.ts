/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import { RivetApi } from "@fern-api/rivet";
import * as core from "../../../../../../core";

export const ListActivitiesOutput: core.serialization.ObjectSchema<
    serializers.identity.ListActivitiesOutput.Raw,
    RivetApi.identity.ListActivitiesOutput
> = core.serialization.object({
    identities: core.serialization.list(
        core.serialization.lazyObject(async () => (await import("../../../../..")).commons.IdentityHandle)
    ),
    games: core.serialization.list(
        core.serialization.lazyObject(async () => (await import("../../../../..")).commons.GameSummary)
    ),
    parties: core.serialization.list(
        core.serialization.lazyObject(async () => (await import("../../../../..")).commons.PartySummary)
    ),
    suggestedGroups: core.serialization.property(
        "suggested_groups",
        core.serialization.list(
            core.serialization.lazyObject(async () => (await import("../../../../..")).commons.GroupSummary)
        )
    ),
    suggestedPlayers: core.serialization.property(
        "suggested_players",
        core.serialization.list(
            core.serialization.lazyObject(async () => (await import("../../../../..")).commons.IdentityHandle)
        )
    ),
    watch: core.serialization.lazyObject(async () => (await import("../../../../..")).commons.WatchResponse),
});

export declare namespace ListActivitiesOutput {
    interface Raw {
        identities: serializers.commons.IdentityHandle.Raw[];
        games: serializers.commons.GameSummary.Raw[];
        parties: serializers.commons.PartySummary.Raw[];
        suggested_groups: serializers.commons.GroupSummary.Raw[];
        suggested_players: serializers.commons.IdentityHandle.Raw[];
        watch: serializers.commons.WatchResponse.Raw;
    }
}
