/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import { RivetApi } from "@rivet-gg/api";
import * as core from "../../../../../../core";

export const RegionInfo: core.serialization.ObjectSchema<
    serializers.matchmaker.RegionInfo.Raw,
    RivetApi.matchmaker.RegionInfo
> = core.serialization.object({
    regionId: core.serialization.property(
        "region_id",
        core.serialization.lazy(async () => (await import("../../../../..")).commons.Identifier)
    ),
    providerDisplayName: core.serialization.property("provider_display_name", core.serialization.string()),
    regionDisplayName: core.serialization.property("region_display_name", core.serialization.string()),
    datacenterCoord: core.serialization.property(
        "datacenter_coord",
        core.serialization.lazyObject(async () => (await import("../../../../..")).commons.Coord)
    ),
    datacenterDistanceFromClient: core.serialization.property(
        "datacenter_distance_from_client",
        core.serialization.lazyObject(async () => (await import("../../../../..")).commons.Distance)
    ),
});

export declare namespace RegionInfo {
    interface Raw {
        region_id: serializers.commons.Identifier.Raw;
        provider_display_name: string;
        region_display_name: string;
        datacenter_coord: serializers.commons.Coord.Raw;
        datacenter_distance_from_client: serializers.commons.Distance.Raw;
    }
}
