/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import { RivetApi } from "@fern-api/rivet";
import * as core from "../../../../../../core";

export const IdentityHandle: core.serialization.ObjectSchema<
    serializers.commons.IdentityHandle.Raw,
    RivetApi.commons.IdentityHandle
> = core.serialization.object({
    identityId: core.serialization.property("identity_id", core.serialization.string()),
    displayName: core.serialization.property(
        "display_name",
        core.serialization.lazy(async () => (await import("../../../../..")).commons.DisplayName)
    ),
    accountNumber: core.serialization.property(
        "account_number",
        core.serialization.lazy(async () => (await import("../../../../..")).commons.AccountNumber)
    ),
    avatarUrl: core.serialization.property("avatar_url", core.serialization.string()),
    presence: core.serialization
        .lazyObject(async () => (await import("../../../../..")).commons.IdentityPresence)
        .optional(),
    party: core.serialization.lazyObject(async () => (await import("../../../../..")).commons.PartyHandle).optional(),
    isRegistered: core.serialization.property("is_registered", core.serialization.boolean()),
    external: core.serialization.lazyObject(async () => (await import("../../../../..")).commons.IdentityExternalLinks),
});

export declare namespace IdentityHandle {
    interface Raw {
        identity_id: string;
        display_name: serializers.commons.DisplayName.Raw;
        account_number: serializers.commons.AccountNumber.Raw;
        avatar_url: string;
        presence?: serializers.commons.IdentityPresence.Raw | null;
        party?: serializers.commons.PartyHandle.Raw | null;
        is_registered: boolean;
        external: serializers.commons.IdentityExternalLinks.Raw;
    }
}
