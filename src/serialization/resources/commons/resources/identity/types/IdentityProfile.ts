/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import { RivetApi } from "@fern-api/rivet";
import * as core from "../../../../../../core";

export const IdentityProfile: core.serialization.ObjectSchema<
    serializers.commons.IdentityProfile.Raw,
    RivetApi.commons.IdentityProfile
> = core.serialization.object({
    identityId: core.serialization.property("identity_id", core.serialization.string()),
    displayName: core.serialization.property(
        "display_name",
        core.serialization.lazy(async () => (await import("../../../../..")).commons.DisplayName)
    ),
    accountNumber: core.serialization.property(
        "account_number",
        core.serialization.lazy(async () => (await import("../../../../..")).commons.AccountNumber)
    ),
    avatarUrl: core.serialization.property("avatar_url", core.serialization.string()),
    presence: core.serialization
        .lazyObject(async () => (await import("../../../../..")).commons.IdentityPresence)
        .optional(),
    party: core.serialization.lazyObject(async () => (await import("../../../../..")).commons.PartySummary).optional(),
    isRegistered: core.serialization.property("is_registered", core.serialization.boolean()),
    external: core.serialization.lazyObject(async () => (await import("../../../../..")).commons.IdentityExternalLinks),
    isAdmin: core.serialization.property("is_admin", core.serialization.boolean()),
    isGameLinked: core.serialization.property("is_game_linked", core.serialization.boolean().optional()),
    devState: core.serialization.property(
        "dev_state",
        core.serialization.lazy(async () => (await import("../../../../..")).commons.IdentityDevState).optional()
    ),
    followerCount: core.serialization.property("follower_count", core.serialization.number()),
    followingCount: core.serialization.property("following_count", core.serialization.number()),
    following: core.serialization.boolean(),
    isFollowingMe: core.serialization.property("is_following_me", core.serialization.boolean()),
    isMutualFollowing: core.serialization.property("is_mutual_following", core.serialization.boolean()),
    joinTs: core.serialization.property(
        "join_ts",
        core.serialization.lazy(async () => (await import("../../../../..")).commons.Timestamp)
    ),
    bio: core.serialization.lazy(async () => (await import("../../../../..")).commons.Bio),
    linkedAccounts: core.serialization.property(
        "linked_accounts",
        core.serialization.list(
            core.serialization.lazy(async () => (await import("../../../../..")).commons.IdentityLinkedAccount)
        )
    ),
    groups: core.serialization.list(
        core.serialization.lazyObject(async () => (await import("../../../../..")).commons.IdentityGroup)
    ),
    games: core.serialization.list(
        core.serialization.lazyObject(async () => (await import("../../../../..")).commons.GameStatSummary)
    ),
});

export declare namespace IdentityProfile {
    interface Raw {
        identity_id: string;
        display_name: serializers.commons.DisplayName.Raw;
        account_number: serializers.commons.AccountNumber.Raw;
        avatar_url: string;
        presence?: serializers.commons.IdentityPresence.Raw | null;
        party?: serializers.commons.PartySummary.Raw | null;
        is_registered: boolean;
        external: serializers.commons.IdentityExternalLinks.Raw;
        is_admin: boolean;
        is_game_linked?: boolean | null;
        dev_state?: serializers.commons.IdentityDevState.Raw | null;
        follower_count: number;
        following_count: number;
        following: boolean;
        is_following_me: boolean;
        is_mutual_following: boolean;
        join_ts: serializers.commons.Timestamp.Raw;
        bio: serializers.commons.Bio.Raw;
        linked_accounts: serializers.commons.IdentityLinkedAccount.Raw[];
        groups: serializers.commons.IdentityGroup.Raw[];
        games: serializers.commons.GameStatSummary.Raw[];
    }
}
