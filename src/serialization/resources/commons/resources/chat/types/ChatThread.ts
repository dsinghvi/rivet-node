/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import { RivetApi } from "@fern-api/rivet";
import * as core from "../../../../../../core";

export const ChatThread: core.serialization.ObjectSchema<
    serializers.commons.ChatThread.Raw,
    RivetApi.commons.ChatThread
> = core.serialization.object({
    threadId: core.serialization.property("thread_id", core.serialization.string()),
    createTs: core.serialization.property(
        "create_ts",
        core.serialization.lazy(async () => (await import("../../../../..")).commons.Timestamp)
    ),
    topic: core.serialization.lazy(async () => (await import("../../../../..")).commons.ChatTopic),
    tailMessage: core.serialization.property(
        "tail_message",
        core.serialization.lazyObject(async () => (await import("../../../../..")).commons.ChatMessage).optional()
    ),
    lastReadTs: core.serialization.property(
        "last_read_ts",
        core.serialization.lazy(async () => (await import("../../../../..")).commons.Timestamp)
    ),
    unreadCount: core.serialization.property("unread_count", core.serialization.number()),
    external: core.serialization.lazyObject(
        async () => (await import("../../../../..")).commons.ChatThreadExternalLinks
    ),
});

export declare namespace ChatThread {
    interface Raw {
        thread_id: string;
        create_ts: serializers.commons.Timestamp.Raw;
        topic: serializers.commons.ChatTopic.Raw;
        tail_message?: serializers.commons.ChatMessage.Raw | null;
        last_read_ts: serializers.commons.Timestamp.Raw;
        unread_count: number;
        external: serializers.commons.ChatThreadExternalLinks.Raw;
    }
}
