/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../..";
import { RivetIdentity } from "@fern-api/rivet-identity";
import * as core from "../../../core";

export const PartyActivity: core.schemas.Schema<serializers.PartyActivity.Raw, RivetIdentity.PartyActivity> =
  core.schemas
    .union("type", {
      idle: core.schemas.object({}),
      matchmaker_finding_lobby: core.schemas.lazyObject(
        async () => (await import("../..")).PartyActivityMatchmakerFindingLobby
      ),
      matchmaker_lobby: core.schemas.lazyObject(async () => (await import("../..")).PartyActivityMatchmakerLobby),
    })
    .transform<RivetIdentity.PartyActivity>({
      parse: (value) => {
        switch (value.type) {
          case "idle":
            return RivetIdentity.PartyActivity.idle();
          case "matchmaker_finding_lobby":
            return RivetIdentity.PartyActivity.matchmakerFindingLobby(value);
          case "matchmaker_lobby":
            return RivetIdentity.PartyActivity.matchmakerLobby(value);
          default:
            return RivetIdentity.PartyActivity._unknown(value);
        }
      },
      json: (value) => value as any,
    });

export declare namespace PartyActivity {
  type Raw = PartyActivity.Idle | PartyActivity.MatchmakerFindingLobby | PartyActivity.MatchmakerLobby;

  interface Idle {
    type: "idle";
  }

  interface MatchmakerFindingLobby extends serializers.PartyActivityMatchmakerFindingLobby.Raw {
    type: "matchmaker_finding_lobby";
  }

  interface MatchmakerLobby extends serializers.PartyActivityMatchmakerLobby.Raw {
    type: "matchmaker_lobby";
  }
}
